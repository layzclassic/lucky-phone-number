<style>
#vanity-container {
    display: inline-flex;
}
.vanity-container {
    align-items: center;
}
.vanity-container button {
    display: inline-flex;
}
.vanity-container input {
    width: 250px;
    margin-bottom: 10px;
    margin-right: 10px;
}
.output-container {
    display: block;
    width: 100%;
}
.vanity-result-container3 {
    font-weight: bold;
    height: 60px;
}
.vanity-error-container3 {
    color: red;
    font-weight: bold;
    margin-bottom:10px;
    height: 20px; 
}
.valid {
    color: green;
}
.unused {
    color: lightgrey;
}
.used {
    color: green;
}
</style>

<div id="vanity-container">
    <form id="vanityNumberForm">
    		<h4>Step 3: Fill in your lucky numbers</h4>
        <div class="vanity-container">
            <input type="number" id="vanity_lifePathNumber" placeholder="Life Path Number" required min="1" max="99" maxlength="2" required>
            <input type="number" id="vanity_expressionNumber" placeholder="Expression Number" required min="1" max="99" maxlength="2" required>
            <button type="button" id="exploreBtn">Explore</button>
        </div>
        <h4>Step 4: Make your own vanity number</h4>
        <div class="vanity-container">
            <input type="text" id="vanity_characters" placeholder="Vanity Number" required pattern="^[a-zA-Z0-9]{7}$" maxlength="7" required>
            <button type="button" id="checkBtn">Check</button>
        </div>
    </form>
</div>

<div class="output-container">
    <div class="vanity-error-container3" id="vanityError"></div>
    <div class="vanity-result-container3" id="vanityResult"></div>
</div>

<script>
    const numberToLetters = {
        '2': ['A', 'B', 'C'],
        '3': ['D', 'E', 'F'],
        '4': ['G', 'H', 'I'],
        '5': ['J', 'K', 'L'],
        '6': ['M', 'N', 'O'],
        '7': ['P', 'Q', 'R', 'S'],
        '8': ['T', 'U', 'V'],
        '9': ['W', 'X', 'Y', 'Z']
    };

    const vanityResult = document.getElementById('vanityResult');
    const vanityError = document.getElementById('vanityError');

    document.getElementById('exploreBtn').addEventListener('click', function() {
        // Reset Error and Result
        vanityError.textContent = '';
        vanityResult.innerHTML = '';

        let lifePathNumber = document.getElementById('vanity_lifePathNumber').value;
        let expressionNumber = document.getElementById('vanity_expressionNumber').value;
        
        // handle double digit master numbers
        lifePathNumber = ['11', '22', '33'].includes(lifePathNumber) ? lifePathNumber[0] : lifePathNumber;
        expressionNumber = ['11', '22', '33'].includes(expressionNumber) ? expressionNumber[0] : expressionNumber;

        let lifePathLetters = numberToLetters[lifePathNumber];
        let expressionLetters = numberToLetters[expressionNumber];

        if (lifePathNumber == '0' || lifePathNumber == '1' || expressionNumber == '0' || expressionNumber == '1') {
            vanityError.textContent = 'Sorry, there is no 0 and 1 in vanity number!';
        } else if (lifePathLetters && expressionLetters) {
            vanityResult.innerHTML = `You need to use: <br> 
            <span id="lifePathNumber" class="unused">${lifePathNumber}</span> <span id="lifePathEqual" class="unused">=</span> <span id="lifePathLetters" class="unused">${lifePathLetters.join(', ')}</span> <br> 
            <span id="expressionNumber" class="unused">${expressionNumber}</span> <span id="expressionEqual" class="unused">=</span> <span id="expressionLetters" class="unused">${expressionLetters.join(', ')}</span>`;
            vanityResult.setAttribute('data-lifePathNumber', lifePathNumber);
            vanityResult.setAttribute('data-expressionNumber', expressionNumber);
        } else {
            vanityResult.innerHTML = '';
            vanityError.textContent = 'Invalid Life Path or Expression Number';
        }
    });

    document.getElementById('checkBtn').addEventListener('click', function() {
        // Reset classes
        resetClasses();

        let characters = document.getElementById('vanity_characters').value.toUpperCase();
        if (characters.length < 7) {
            vanityError.textContent = 'Fill in 7 characters, letters or numbers';
            return;
        }

        let lifePathNumber = vanityResult.getAttribute('data-lifePathNumber');
        let expressionNumber = vanityResult.getAttribute('data-expressionNumber');
        checkCharacters(characters, lifePathNumber, expressionNumber);
    });

    function updateClass(id, condition) {
        document.getElementById(id).className = condition ? 'used' : 'unused';
    }

    function resetClasses() {
        let ids = ['lifePathNumber', 'lifePathEqual', 'lifePathLetters', 'expressionNumber', 'expressionEqual', 'expressionLetters'];
        ids.forEach(id => document.getElementById(id).className = 'unused');
    }

    function checkCharacters(characters, lifePathNumber, expressionNumber) {
        let lifePathUsed = characters.split('').some(char => numberToLetters[lifePathNumber].includes(char));
        let expressionUsed = characters.split('').some(char => numberToLetters[expressionNumber].includes(char));

        // Change classes based on usage
        updateClass('lifePathNumber', lifePathUsed);
        updateClass('lifePathEqual', lifePathUsed);
        updateClass('lifePathLetters', lifePathUsed);
        updateClass('expressionNumber', expressionUsed);
        updateClass('expressionEqual', expressionUsed);
        updateClass('expressionLetters', expressionUsed);

        if (lifePathUsed && expressionUsed) {
            vanityError.innerHTML = '<span class="valid">This vanity number works!</span>';
        } else {
            vanityError.textContent = 'Use all your lucky numbers!';
        }
    }
</script>
